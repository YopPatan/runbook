<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="52995563-93ff-49ea-98b1-a8f69638b2a2" activeEnvironment="Default" name="Runbook" resourceRoot="" soapui-version="5.5.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="c492d340-2b6f-46ef-9ef0-7f85184b3475" port="8080" path="/runbook" host="localhost" name="runbook" docroot=""><con:settings/><con:properties/><con:onRequestScript/><con:restMockAction name="runbook" method="GET" resourcePath="/runbook" id="c71c7e4d-2d33-4dc0-8266-645c1e1962c2"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="default" id="78b7fcd5-2fd1-42cd-8f38-98223eb833cb" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"period": "2019-06-01",
	"estimateDate": "2019-06-18",
	"currentDelay": "02:00",
	"milestones": [
		{
			"id": 1,
			"name": "Nombre hito 1",
			"code": "H1",
			"delay": "00:00",
			"date": "2019-06-18"
		},
		{
			"id": 2,
			"name": "Nombre hito 2",
			"code": "H1",
			"delay": "00:00",
			"date": "2019-06-19"
		},
		{
			"id": 3,
			"name": "Nombre hito 3",
			"code": "H1",
			"delay": "00:00",
			"date": "2019-06-20"
		},
			{
			"id": 1,
			"name": "Nombre hito 4",
			"code": "H1",
			"delay": "00:00",
			"date": "2019-06-18"
		},
		{
			"id": 2,
			"name": "Nombre hito 5",
			"code": "H1",
			"delay": "00:00",
			"date": "2020-06-19"
		},
		{
			"id": 3,
			"name": "Nombre hito 6",
			"code": "H1",
			"delay": "00:00",
			"date": "2020-06-20"
		},
			{
			"id": 1,
			"name": "Nombre hito 7",
			"code": "H1",
			"delay": "00:00",
			"date": "2020-06-18"
		},
		{
			"id": 2,
			"name": "Nombre hito 8",
			"code": "H1",
			"delay": "00:00",
			"date": "2020-06-19"
		},
		{
			"id": 3,
			"name": "Nombre hito 9",
			"code": "H1",
			"delay": "00:00",
			"date": "2020-06-20"
		}
	]
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>GET</con:value></con:header><con:header><con:name>Access-Control-Allow-Headers</con:name><con:value>*</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="pending" method="GET" resourcePath="/pending" id="4c402791-673b-4cc4-ac85-2605533143f9"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="default" id="ae654b8b-6941-4509-81e5-2d95a09d0739" httpResponseStatus="200"><con:settings/><con:responseContent>[
	{
		"id": 1
	}
]</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>