<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="52995563-93ff-49ea-98b1-a8f69638b2a2" activeEnvironment="Default" name="Runbook" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="c492d340-2b6f-46ef-9ef0-7f85184b3475" port="8080" path="/runbook" host="localhost" name="runbook" docroot=""><con:settings/><con:properties/><con:onRequestScript/><con:restMockAction name="runbook" method="GET" resourcePath="/runbook/1" id="c71c7e4d-2d33-4dc0-8266-645c1e1962c2"><con:settings/><con:defaultResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">default</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="default" id="78b7fcd5-2fd1-42cd-8f38-98223eb833cb" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"id": 1,
	"nombre": "Mayo 2019",
	"periodo": "2019-06-01",
	"fechaEstimada": "2019-06-18",
	"tiempoRetraso": "02:00",
	"hitos": [
		{
			"id": 1,
			"idEstado": 1,
			"nombre": "Nombre hito 1",
			"codigo": "H1",
			"fecha": "2019-06-18",
			"responsable": {
				"id": 1,
				"nombre": "Jorge Ttodasoni",
				"email": "a@a.cl",
				"telefono": "+56988888888"
			},
			"resumen": {
				"delay": "00:00",
				"todas": 10,
				"finalizadas": 2
			}
		},
		{
			"id": 2,
			"idEstado": 1,
			"nombre": "Nombre hito 2",
			"codigo": "H1",
			"fecha": "2019-06-19",
			"responsable": {
				"id": 1,
				"nombre": "Jorge Ttodasoni",
				"email": "a@a.cl",
				"telefono": "+56988888888"
			},
			"resumen": {
				"delay": "00:00",
				"todas": 10,
				"finalizadas": 2
			}
		},
		{
			"id": 3,
			"idEstado": 1,
			"nombre": "Nombre hito 3",
			"codigo": "H1",
			"fecha": "2019-06-20",
			"responsable": {
				"id": 1,
				"nombre": "Jorge Ttodasoni",
				"email": "a@a.cl",
				"telefono": "+56988888888"
			},
			"resumen": {
				"delay": "00:00",
				"todas": 10,
				"finalizadas": 2
			}
		},
			{
			"id": 1,
			"idEstado": 1,
			"nombre": "Nombre hito 4",
			"codigo": "H1",
			"fecha": "2019-06-18",
			"responsable": {
				"id": 1,
				"nombre": "Jorge Ttodasoni",
				"email": "a@a.cl",
				"telefono": "+56988888888"
			},
			"resumen": {
				"delay": "00:00",
				"todas": 10,
				"finalizadas": 2
			}
		},
		{
			"id": 2,
			"idEstado": 1,
			"nombre": "Nombre hito 5",
			"codigo": "H1",
			"fecha": "2020-06-19",
			"responsable": {
				"id": 1,
				"nombre": "Jorge Ttodasoni",
				"email": "a@a.cl",
				"telefono": "+56988888888"
			},
			"resumen": {
				"delay": "00:00",
				"todas": 10,
				"finalizadas": 2
			}
		},
		{
			"id": 3,
			"idEstado": 1,
			"nombre": "Nombre hito 6",
			"codigo": "H1",
			"fecha": "2020-06-20",
			"responsable": {
				"id": 1,
				"nombre": "Jorge Ttodasoni",
				"email": "a@a.cl",
				"telefono": "+56988888888"
			},
			"resumen": {
				"delay": "00:00",
				"todas": 10,
				"finalizadas": 2
			}
		},
			{
			"id": 1,
			"idEstado": 1,
			"nombre": "Nombre hito 7",
			"codigo": "H1",
			"fecha": "2020-06-18",
			"responsable": {
				"id": 1,
				"nombre": "Jorge Ttodasoni",
				"email": "a@a.cl",
				"telefono": "+56988888888"
			},
			"resumen": {
				"delay": "00:00",
				"todas": 10,
				"finalizadas": 2
			}
		},
		{
			"id": 2,
			"idEstado": 1,
			"nombre": "Nombre hito 8",
			"codigo": "H1",
			"fecha": "2020-06-19",
			"responsable": {
				"id": 1,
				"nombre": "Jorge Ttodasoni",
				"email": "a@a.cl",
				"telefono": "+56988888888"
			},
			"resumen": {
				"delay": "00:00",
				"todas": 10,
				"finalizadas": 2
			}
		},
		{
			"id": 3,
			"idEstado": 1,
			"nombre": "Nombre hito 9",
			"codigo": "H1",
			"fecha": "2020-06-20",
			"responsable": {
				"id": 1,
				"nombre": "Jorge Ttodasoni",
				"email": "a@a.cl",
				"telefono": "+56988888888"
			},
			"resumen": {
				"delay": "00:00",
				"todas": 10,
				"finalizadas": 2
			}
		}
	]
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Allow-Headers</con:name><con:value>*</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="pending" method="POST" resourcePath="/pending" id="4c402791-673b-4cc4-ac85-2605533143f9"><con:settings/><con:defaultResponse>default</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="default" id="ae654b8b-6941-4509-81e5-2d95a09d0739" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
	{
		"id": 1,
		"idHito": 1,
		"idEstado": 1,
		"nombre": "Nombre actividad 1",
		"descripcion": "Descripcion larga de la actividad 1",
		"codigo": "AC1",
		"delay": "00:00"
	},
	{
		"id": 2,
		"idHito": 1,
		"idEstado": 1,
		"nombre": "Nombre actividad 1",
		"descripcion": "Descripcion larga de la actividad 1",
		"codigo": "AC1",
		"delay": "00:00"
	},
	{
		"id": 3,
		"idHito": 1,
		"idEstado": 1,
		"nombre": "Nombre actividad 1",
		"descripcion": "Descripcion larga de la actividad 1",
		"codigo": "AC1",
		"delay": "00:00"
	},
	{
		"id": 4,
		"idHito": 1,
		"idEstado": 1,
		"nombre": "Nombre actividad 1",
		"descripcion": "Descripcion larga de la actividad 1",
		"codigo": "AC1",
		"delay": "00:00"
	},
	{
		"id": 5,
		"idHito": 1,
		"idEstado": 1,
		"nombre": "Nombre actividad 1",
		"descripcion": "Descripcion larga de la actividad 1",
		"codigo": "AC1",
		"delay": "00:00"
	}
]</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Allow-Headers</con:name><con:value>*</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="milestone" method="POST" resourcePath="/milestone" id="29ce3229-ee77-450d-abd7-f3d78f0aaa8e"><con:settings/><con:defaultResponse>default</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="default" id="ff69ddd9-d220-4b63-8698-de36e550c353" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"id": 1,
	"idEstado": 1,
	"idPersona": 1,
	"nombre": "Nombre hito 1",
	"codigo": "H1",
	"delay": "00:00",
	"fecha": "2019-06-18",
	"actividades": [
		{
			"id": 1,
			"idHito": 1,
			"idEstado": 1,
			"nombre": "Nombre actividad 1",
			"descripcion": "Descripcion larga de la actividad 1",
			"codigo": "AC1",
			"delay": "00:00"
		},
		{
			"id": 2,
			"idHito": 1,
			"idEstado": 1,
			"nombre": "Nombre actividad 1",
			"descripcion": "Descripcion larga de la actividad 1",
			"codigo": "AC1",
			"delay": "00:00"
		},
		{
			"id": 3,
			"idHito": 1,
			"idEstado": 1,
			"nombre": "Nombre actividad 1",
			"descripcion": "Descripcion larga de la actividad 1",
			"codigo": "AC1",
			"delay": "00:00"
		},
		{
			"id": 4,
			"idHito": 1,
			"idEstado": 1,
			"nombre": "Nombre actividad 1",
			"descripcion": "Descripcion larga de la actividad 1",
			"codigo": "AC1",
			"delay": "00:00"
		},
		{
			"id": 5,
			"idHito": 1,
			"idEstado": 1,
			"nombre": "Nombre actividad 1",
			"descripcion": "Descripcion larga de la actividad 1",
			"codigo": "AC1",
			"delay": "00:00"
		}
	]
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Allow-Headers</con:name><con:value>*</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="signin" method="POST" resourcePath="/signin" id="5199058a-cec8-4315-92c5-1f9dfa5156cd"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="default" id="104c116e-1123-433c-8792-00464016edeb" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"token": "1234567",
	"idPerson": 1,
	"name": "Jorge Talloni"
}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Allow-Headers</con:name><con:value>*</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="CORS" method="OPTIONS" resourcePath="/" id="1d8bdc1a-ac20-4c1f-968e-05caf51e3def"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="default" id="2d4fd34a-9d2f-4dc2-bab3-e45a17b0f0ae" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent/><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>GET, POST, OPTIONS</con:value></con:header><con:header><con:name>Access-Control-Allow-Headers</con:name><con:value>*</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="runbooks" method="GET" resourcePath="/runbook" id="27fc9886-0cc1-4a3a-bf5c-4f5267a6bea9"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="default" id="e9e10515-f687-4d8b-80cc-0816f1eb0f40" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
   {
      "id":1,
      "nombre":"Runbook Oficial",
      "periodo":"6-2019"
   },
   {
      "id":2,
      "nombre":"Runbook Oficial",
      "periodo":"5-2019"
   },
   {
      "id":3,
      "nombre":"Runbook Oficial",
      "periodo":"4-2019"
   },
   {
      "id":4,
      "nombre":"Runbook Oficial",
      "periodo":"3-2019"
   },
   {
      "id":5,
      "nombre":"Runbook Oficial",
      "periodo":"2-2019"
   },
   {
      "id":6,
      "nombre":"Runbook Oficial",
      "periodo":"1-2019"
   },
   {
      "id":7,
      "nombre":"Runbook Oficial",
      "periodo":"6-2019"
   }
]</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Access-Control-Allow-Headers</con:name><con:value>*</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>